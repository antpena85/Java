package com.fdm.tradingplatform.model;

import java.util.Properties;

import com.fdm.tradingplatform.model.storage.RoleDatabaseDao;
import com.fdm.tradingplatform.model.storage.RoleXmlDao;
import com.fdm.tradingplatform.model.storage.UserDatabaseDao;
import com.fdm.tradingplatform.model.storage.UserRequestDatabaseDao;
import com.fdm.tradingplatform.model.storage.UserRequestXmlDao;
import com.fdm.tradingplatform.model.storage.UserXmlDao;
import com.fdm.tradingplatform.model.storage.iDao;

public class DaoFactory {

	public enum TypeOfInstance {
		USER, REQUEST, ROLE
	}

	private iConnectionPool connectionPool;
	private Context context;
	private Properties properties;

	public DaoFactory() {
		context = Context.getInstance();
		connectionPool = (iConnectionPool) context.getName("CONNECTION_POOL");
		properties = TradingPlatformProperties.getInstance();
	}

	public iDao getInstance(TypeOfInstance typeOfInstance) {

		switch (typeOfInstance) {

		case USER:
			return makeUserDao(connectionPool.getConnection("USER"));
		case REQUEST:
			return makeUserRequestDao(connectionPool.getConnection("REQUEST"));
		case ROLE:
			return makeRoleDao(connectionPool.getConnection("ROLE"));

		}

		return null;
	}

	private iDao makeUserDao(Object connection) {

		if (properties.getProperty("storageMedium").equals("XML")) {

			return UserXmlDao.getInstance((String) connection);

		} else if (properties.getProperty("storageMedium").equals("DATABASE")) {

			return new UserDatabaseDao((DatabaseConnectionPool) connection);
		}

		return null;

	}

	private iDao makeUserRequestDao(Object connection) {

		if (properties.getProperty("storageMedium").equals("XML")) {

			return UserRequestXmlDao.getInstance((String) connection);
		} else if (properties.getProperty("storageMedium").equals("DATABASE")) {

			return new UserRequestDatabaseDao((DatabaseConnectionPool) connection);
		}
		return null;
	}

	private iDao makeRoleDao(Object connection) {

		if (properties.getProperty("storageMedium").equals("XML")) {

			return RoleXmlDao.getInstance((String) connection);

		} else if (properties.getProperty("storageMedium").equals("DATABASE")) {

			return new RoleDatabaseDao((DatabaseConnectionPool) connection);
		} else
			return null;

	}

}
